#include "Sort.h"

Sort::Sort()
{

}

Sort::~Sort()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section 10-103-10-63-43ade06e:13db6b35c7b:-8000:0000000000000E67 begin
{
}
// section 10-103-10-63-43ade06e:13db6b35c7b:-8000:0000000000000E67 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

Sort::Sort(string nom, int coupMana, bool elite, int porteeMax, int reussite, int nbCible, int attaque, int duree, int znEffet, int dissip, int nbMaxSortDissip)
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88-1-13--239a61df:13dc1d51575:-8000:0000000000000F2A begin
{
    this->nom = nom;
    this->coupManaParCase = coupMana;
    this->elite = elite;
    this->porteeMax = porteeMax;
    this->pourcentageReussite = reussite;
    this->nombreCibleMax = nbCible;
    this->attaque = attaque;
    this->duree = duree;
    this->zoneEffet = znEffet;
    this->effetDissipation = dissip;
    this->nombreMaxSortDissipable = nbMaxSortDissip;

}
// section -64--88-1-13--239a61df:13dc1d51575:-8000:0000000000000F2A end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

int Sort::calculeNouveauTauxReussite(int dissip, int ancienTaux)
{
    return ancienTaux;
}

int Sort::getPourcentageReussite()
{
	return pourcentageReussite;
}

bool Sort::testerReussite(int taux)
{
    int nb = rand()%100;
    if(nb <= taux)
    {
        return true;
    }
    return false;
}

Joueur* Sort::getProprietaire()
{
	return proprietaire;
}

int Sort::getCoupManaParCase()
{
	return coupManaParCase;
}

string Sort::getNom()
{
    return nom;
}

void Sort::setProprietaire(Joueur* proprietaire)
{
    this->proprietaire = proprietaire;
}

bool Sort::getElite()
{
    return this->elite;
}

int Sort::getPorteeMax()
{
    return this->porteeMax;
}
